generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id               Int                     @id @default(autoincrement())
  first_name            String?
  mid_name              String?
  last_name             String?
  ext_name              String?
  email                 String                  @unique
  profile_picture       String?
  password              String
  created_at            DateTime?
  role                  user_role?
  status                String?
  user_activity_logs    user_activity_logs[]
  activity_logs         activity_logs[]
  faculty               faculty?
  librarian             librarian?
  students              students?
  user_bookmarks        user_bookmarks[]
  backup_jobs           backup_jobs[]
  password_reset_tokens password_reset_tokens[]
}

model faculty {
  employee_id BigInt  @id @unique
  position    String?
  department  String?
  user_id     Int     @unique
  users       users   @relation(fields: [user_id], references: [user_id])
}

model students {
  student_num BigInt  @id @unique
  program     String?
  college     String?
  year_level  Int?
  user_id     Int     @unique
  users       users   @relation(fields: [user_id], references: [user_id])
}

model librarian {
  employee_id   BigInt          @id @unique
  position      String?
  contact_num   Int
  user_id       Int             @unique
  activity_logs activity_logs[]
  users         users           @relation(fields: [user_id], references: [user_id])
}

model papers {
  paper_id           Int                  @id @default(autoincrement())
  title              String?              @unique
  author             String?
  year               Int?
  department         String?
  keywords           String[]
  course             String?
  abstract           String?
  created_at         DateTime?
  updated_at         DateTime?
  is_deleted         Boolean?             @default(false)
  deleted_at         DateTime?
  deleted_by         String?
  paper_url          String?
  paper_metadata     paper_metadata[]
  user_bookmarks     user_bookmarks[]
  user_activity_logs user_activity_logs[]
}

model paper_metadata {
  metadata_id Int     @id @default(autoincrement())
  paper_id    Int
  type        String?
  format      String?
  language    String?
  source      String?
  rights      String?
  papers      papers  @relation(fields: [paper_id], references: [paper_id])
}

model user_bookmarks {
  bookmark_id Int       @id @default(autoincrement())
  user_id     Int
  paper_id    Int
  created_at  DateTime?
  updated_at  DateTime?
  papers      papers    @relation(fields: [paper_id], references: [paper_id])
  users       users     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, paper_id])
}

model Otp {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model password_reset_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique
  expires_at DateTime
  created_at DateTime  @default(now())
  used_at    DateTime?

  // Relations
  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model activity_logs {
  name          String
  activity      String
  created_at    DateTime       @default(now())
  act_id        Int            @id @default(autoincrement())
  activity_type activity_type?
  ip_address    String?
  status        String?
  user_agent    String?
  employee_id   BigInt
  user_id       Int
  librarian     librarian      @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  users         users          @relation(fields: [user_id], references: [user_id])
}

model user_activity_logs {
  activity_id   Int            @id @default(autoincrement())
  user_id       Int
  paper_id      Int
  name          String
  activity      String
  created_at    DateTime?
  activity_type activity_type?
  status        String?
  user_agent    String?
  employee_id   BigInt
  student_num   BigInt
  users         users          @relation(fields: [user_id], references: [user_id])
  papers        papers         @relation(fields: [paper_id], references: [paper_id])
}

model backup_jobs {
  id            String    @id @default(cuid())
  type          String // 'full', 'documents'
  status        String    @default("pending") // 'pending', 'running', 'completed', 'failed'
  created_by    Int
  created_at    DateTime  @default(now())
  completed_at  DateTime?
  file_count    Int       @default(0)
  total_size    String    @default("0")
  download_url  String?
  error_message String?

  // Relations
  creator users @relation(fields: [created_by], references: [user_id], onDelete: Cascade)

  @@map("backup_jobs")
}

model backup_settings {
  id                  String    @id @default(cuid())
  frequency           String    @default("weekly") // 'daily', 'weekly', 'monthly', 'manual'
  backup_time         String    @default("02:00") // Time in HH:MM format
  retention_days      Int       @default(30)
  auto_delete         Boolean   @default(true)
  compress_backups    Boolean   @default(true)
  email_notifications Boolean   @default(false)
  notification_email  String?
  last_cleanup        DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  @@map("backup_settings")
}

enum activity_type {
  LOGIN
  LOGOUT
  VIEW_DOCUMENT
  DOWNLOAD_DOCUMENT
  CHANGE_PASSWORD
  PASSWORD_RESET
  ADD_USER
  DELETE_USER
  MODIFY_USER
  DELETE_DOCUMENT
  UPDATE_DOCUMENT
  UPLOAD_DOCUMENT
  SECURITY_VIOLATION
  PRINT_DOCUMENT
  BACKUP_CREATED
  BACKUP_COMPLETED
  BACKUP_FAILED
  BACKUP_DOWNLOADED
  PERMANENT_DELETE
}

enum user_role {
  ADMIN
  ASSISTANT
  LIBRARIAN
  STUDENT
  FACULTY
}
